"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/rate.ts
var rate_exports = {};
__export(rate_exports, {
  default: () => rate_default
});
module.exports = __toCommonJS(rate_exports);
var import_ramda2 = require("ramda");
var import_sort_unwind = require("sort-unwind");

// src/constants.ts
var builder = (options) => {
  const { z = 3, mu = 25, preventSigmaIncrease = false, epsilon = 1e-4 } = options;
  const { tau = mu / 300, sigma = mu / z, beta = sigma / 2, limitSigma = preventSigmaIncrease } = options;
  const betaSq = beta ** 2;
  return {
    SIGMA: sigma,
    MU: mu,
    EPSILON: epsilon,
    TWOBETASQ: 2 * betaSq,
    BETA: beta,
    BETASQ: betaSq,
    Z: z,
    TAU: tau,
    LIMIT_SIGMA: limitSigma
  };
};
var constants_default = builder;

// src/util.ts
var import_ramda = require("ramda");
var sum = (a, b) => a + b;
var rankings = (teams, rank = []) => {
  const teamScores = teams.map((_, i) => rank[i] || i);
  const outRank = new Array(teams.length);
  let s = 0;
  for (let j = 0; j < teamScores.length; j += 1) {
    if (j > 0 && teamScores[j - 1] < teamScores[j]) {
      s = j;
    }
    outRank[j] = s;
  }
  return outRank;
};
var teamRating = (options) => (game) => {
  const rank = rankings(game, options.rank);
  return game.map((team, i) => [
    // mu[i]
    team.map(({ mu }) => mu).reduce(sum, 0),
    // sigma^2[i]
    team.map(({ sigma }) => sigma * sigma).reduce(sum, 0),
    // (original team data)
    team,
    // rank[i]
    rank[i]
  ]);
};
var utilC = (options) => {
  const { BETASQ } = constants_default(options);
  return (teamRatings) => Math.sqrt(teamRatings.map(([_teamMu, teamSigmaSq, _team, _rank]) => teamSigmaSq + BETASQ).reduce(sum, 0));
};
var utilSumQ = (teamRatings, c) => teamRatings.map(
  ([_qMu, _qSigmaSq, _qTeam, qRank]) => teamRatings.filter(([_iMu, _iSigmaSq, _iTeam, iRank]) => iRank >= qRank).map(([iMu, _iSigmaSq, _iTeam, _iRank]) => Math.exp(iMu / c)).reduce(sum, 0)
);
var utilA = (teamRatings) => teamRatings.map(
  ([_iMu, _iSigmaSq, _iTeam, iRank]) => teamRatings.filter(([_qMu, _qSigmaSq, _qTeam, qRank]) => iRank === qRank).length
);
var gamma = (options) => {
  var _a;
  return (_a = options.gamma) != null ? _a : (
    // default to iSigma / c
    (c, _k, _mu, sigmaSq, _team, _qRank) => Math.sqrt(sigmaSq) / c
  );
};
var util_default = (options) => ({
  utilC: utilC(options),
  teamRating: teamRating(options),
  gamma: gamma(options)
});

// src/models/plackett-luce.ts
var model = (game, options = {}) => {
  const { EPSILON } = constants_default(options);
  const { utilC: utilC2, teamRating: teamRating2, gamma: gamma2 } = util_default(options);
  const teamRatings = teamRating2(game);
  const c = utilC2(teamRatings);
  const sumQ = utilSumQ(teamRatings, c);
  const a = utilA(teamRatings);
  return teamRatings.map((iTeamRating, i) => {
    const [iMu, iSigmaSq, iTeam, iRank] = iTeamRating;
    const iMuOverCe = Math.exp(iMu / c);
    const [omegaSum, deltaSum] = teamRatings.filter(([_qMu, _qSigmaSq, _qTeam, qRank]) => qRank <= iRank).reduce(
      ([omega, delta], [_], q) => {
        const quotient = iMuOverCe / sumQ[q];
        return [omega + (i === q ? 1 - quotient : -quotient) / a[q], delta + quotient * (1 - quotient) / a[q]];
      },
      [0, 0]
    );
    const iGamma = gamma2(c, teamRatings.length, ...iTeamRating);
    const iOmega = omegaSum * (iSigmaSq / c);
    const iDelta = iGamma * deltaSum * (iSigmaSq / c ** 2);
    return iTeam.map(({ mu, sigma }) => ({
      mu: mu + sigma ** 2 / iSigmaSq * iOmega,
      sigma: sigma * Math.sqrt(Math.max(1 - sigma ** 2 / iSigmaSq * iDelta, EPSILON))
    }));
  });
};
var plackett_luce_default = model;

// src/rate.ts
var rate = (teams, options = {}) => {
  var _a, _b, _c;
  const { LIMIT_SIGMA, TAU } = constants_default(options);
  const { model: model2 = plackett_luce_default } = options;
  let processedTeams = teams;
  if (options.tau) {
    const tauSquared = TAU * TAU;
    processedTeams = teams.map(
      (team) => team.map((p) => __spreadProps(__spreadValues({}, p), {
        sigma: Math.sqrt(p.sigma * p.sigma + tauSquared)
      }))
    );
  }
  const rank = (_c = (_b = options.rank) != null ? _b : (_a = options.score) == null ? void 0 : _a.map((points) => -points)) != null ? _c : (0, import_ramda2.range)(1, teams.length + 1);
  const [orderedTeams, tenet] = (0, import_sort_unwind.unwind)(rank, processedTeams);
  const newRatings = model2(orderedTeams, __spreadProps(__spreadValues({}, options), {
    rank: (0, import_ramda2.sortBy)(import_ramda2.identity, rank)
  }));
  let [reorderedTeams] = (0, import_sort_unwind.unwind)(tenet, newRatings);
  if (TAU && LIMIT_SIGMA) {
    reorderedTeams = reorderedTeams.map(
      (team, i) => team.map((p, j) => __spreadProps(__spreadValues({}, p), {
        sigma: Math.min(p.sigma, teams[i][j].sigma)
      }))
    );
  }
  return reorderedTeams;
};
var rate_default = rate;
//# sourceMappingURL=data:application/json;base64,