var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/constants.ts
var builder = (options) => {
  const { z = 3, mu = 25, preventSigmaIncrease = false, epsilon = 1e-4 } = options;
  const { tau = mu / 300, sigma = mu / z, beta = sigma / 2, limitSigma = preventSigmaIncrease } = options;
  const betaSq = beta ** 2;
  return {
    SIGMA: sigma,
    MU: mu,
    EPSILON: epsilon,
    TWOBETASQ: 2 * betaSq,
    BETA: beta,
    BETASQ: betaSq,
    Z: z,
    TAU: tau,
    LIMIT_SIGMA: limitSigma
  };
};
var constants_default = builder;

// src/rating.ts
var rating = (init, options = {}) => {
  const { MU: mu, SIGMA: sigma } = constants_default(__spreadValues(__spreadValues({}, options), init));
  return { mu, sigma };
};
var rating_default = rating;

// src/rate.ts
import { sortBy, identity, range } from "ramda";
import { unwind } from "sort-unwind";

// src/util.ts
import { zip } from "ramda";
var sum = (a, b) => a + b;
var rankings = (teams, rank = []) => {
  const teamScores = teams.map((_, i) => rank[i] || i);
  const outRank = new Array(teams.length);
  let s = 0;
  for (let j = 0; j < teamScores.length; j += 1) {
    if (j > 0 && teamScores[j - 1] < teamScores[j]) {
      s = j;
    }
    outRank[j] = s;
  }
  return outRank;
};
var teamRating = (options) => (game) => {
  const rank = rankings(game, options.rank);
  return game.map((team, i) => [
    // mu[i]
    team.map(({ mu }) => mu).reduce(sum, 0),
    // sigma^2[i]
    team.map(({ sigma }) => sigma * sigma).reduce(sum, 0),
    // (original team data)
    team,
    // rank[i]
    rank[i]
  ]);
};
var utilC = (options) => {
  const { BETASQ } = constants_default(options);
  return (teamRatings) => Math.sqrt(teamRatings.map(([_teamMu, teamSigmaSq, _team, _rank]) => teamSigmaSq + BETASQ).reduce(sum, 0));
};
var utilSumQ = (teamRatings, c) => teamRatings.map(
  ([_qMu, _qSigmaSq, _qTeam, qRank]) => teamRatings.filter(([_iMu, _iSigmaSq, _iTeam, iRank]) => iRank >= qRank).map(([iMu, _iSigmaSq, _iTeam, _iRank]) => Math.exp(iMu / c)).reduce(sum, 0)
);
var utilA = (teamRatings) => teamRatings.map(
  ([_iMu, _iSigmaSq, _iTeam, iRank]) => teamRatings.filter(([_qMu, _qSigmaSq, _qTeam, qRank]) => iRank === qRank).length
);
var gamma = (options) => {
  var _a;
  return (_a = options.gamma) != null ? _a : (
    // default to iSigma / c
    (c, _k, _mu, sigmaSq, _team, _qRank) => Math.sqrt(sigmaSq) / c
  );
};
var util_default = (options) => ({
  utilC: utilC(options),
  teamRating: teamRating(options),
  gamma: gamma(options)
});

// src/models/plackett-luce.ts
var model = (game, options = {}) => {
  const { EPSILON } = constants_default(options);
  const { utilC: utilC2, teamRating: teamRating2, gamma: gamma2 } = util_default(options);
  const teamRatings = teamRating2(game);
  const c = utilC2(teamRatings);
  const sumQ = utilSumQ(teamRatings, c);
  const a = utilA(teamRatings);
  return teamRatings.map((iTeamRating, i) => {
    const [iMu, iSigmaSq, iTeam, iRank] = iTeamRating;
    const iMuOverCe = Math.exp(iMu / c);
    const [omegaSum, deltaSum] = teamRatings.filter(([_qMu, _qSigmaSq, _qTeam, qRank]) => qRank <= iRank).reduce(
      ([omega, delta], [_], q) => {
        const quotient = iMuOverCe / sumQ[q];
        return [omega + (i === q ? 1 - quotient : -quotient) / a[q], delta + quotient * (1 - quotient) / a[q]];
      },
      [0, 0]
    );
    const iGamma = gamma2(c, teamRatings.length, ...iTeamRating);
    const iOmega = omegaSum * (iSigmaSq / c);
    const iDelta = iGamma * deltaSum * (iSigmaSq / c ** 2);
    return iTeam.map(({ mu, sigma }) => ({
      mu: mu + sigma ** 2 / iSigmaSq * iOmega,
      sigma: sigma * Math.sqrt(Math.max(1 - sigma ** 2 / iSigmaSq * iDelta, EPSILON))
    }));
  });
};
var plackett_luce_default = model;

// src/statistics.ts
import gaussian from "gaussian";
var normal = gaussian(0, 1);
var phiMajor = (x) => normal.cdf(x);
var phiMajorInverse = (x) => normal.ppf(x);

// src/rate.ts
var rate = (teams, options = {}) => {
  var _a, _b, _c;
  const { LIMIT_SIGMA, TAU } = constants_default(options);
  const { model: model2 = plackett_luce_default } = options;
  let processedTeams = teams;
  if (options.tau) {
    const tauSquared = TAU * TAU;
    processedTeams = teams.map(
      (team) => team.map((p) => __spreadProps(__spreadValues({}, p), {
        sigma: Math.sqrt(p.sigma * p.sigma + tauSquared)
      }))
    );
  }
  const rank = (_c = (_b = options.rank) != null ? _b : (_a = options.score) == null ? void 0 : _a.map((points) => -points)) != null ? _c : range(1, teams.length + 1);
  const [orderedTeams, tenet] = unwind(rank, processedTeams);
  const newRatings = model2(orderedTeams, __spreadProps(__spreadValues({}, options), {
    rank: sortBy(identity, rank)
  }));
  let [reorderedTeams] = unwind(tenet, newRatings);
  if (TAU && LIMIT_SIGMA) {
    reorderedTeams = reorderedTeams.map(
      (team, i) => team.map((p, j) => __spreadProps(__spreadValues({}, p), {
        sigma: Math.min(p.sigma, teams[i][j].sigma)
      }))
    );
  }
  return reorderedTeams;
};
var rate_default = rate;

// src/ordinal.ts
var ordinal = (rating2, options = {}) => {
  const { sigma, mu } = rating2;
  const { Z } = constants_default(options);
  return mu - Z * sigma;
};
var ordinal_default = ordinal;

// src/predict-win.ts
var predictWin = (teams, options = {}) => {
  const { teamRating: teamRating2 } = util_default(options);
  const { BETASQ } = constants_default(options);
  const teamRatings = teamRating2(teams);
  const n = teams.length;
  const denom = n * (n - 1) / 2;
  return teamRatings.map(
    ([muA, sigmaSqA], i) => teamRatings.filter((_, q) => i !== q).map(([muB, sigmaSqB]) => phiMajor((muA - muB) / Math.sqrt(n * BETASQ + sigmaSqA + sigmaSqB))).reduce(sum, 0) / denom
  );
};
var predict_win_default = predictWin;

// src/predict-draw.ts
import { flatten, sum as sum2, map, addIndex, reduce, head } from "ramda";
var predictDraw = (teams, options = {}) => {
  const { teamRating: teamRating2 } = util_default(options);
  const { BETASQ, BETA } = constants_default(options);
  const totalPlayerCount = flatten(teams).length;
  const drawProbability = 1 / totalPlayerCount;
  const drawMargin = Math.sqrt(totalPlayerCount) * BETA * phiMajorInverse((1 + drawProbability) / 2);
  const teamRatings = map((team) => head(teamRating2([team])), teams);
  const pairwiseProbs = addIndex(reduce)(
    (outerAccum, pairA, i) => {
      const [muA, sigmaSqA] = pairA;
      return reduce(
        (innerAccum, pairB) => {
          const [muB, sigmaSqB] = pairB;
          const sharedDenom = Math.sqrt(totalPlayerCount * BETASQ + sigmaSqA + sigmaSqB);
          innerAccum.push(
            phiMajor((drawMargin - muA + muB) / sharedDenom) - phiMajor((muB - muA - drawMargin) / sharedDenom)
          );
          return innerAccum;
        },
        outerAccum,
        teamRatings.slice(i + 1)
      );
    },
    [],
    teamRatings
  );
  return sum2(pairwiseProbs) / pairwiseProbs.length;
};
var predict_draw_default = predictDraw;
export {
  ordinal_default as ordinal,
  predict_draw_default as predictDraw,
  predict_win_default as predictWin,
  rate_default as rate,
  rating_default as rating
};
//# sourceMappingURL=data:application/json;base64,