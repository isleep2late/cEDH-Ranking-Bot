// src/util.ts
import { zip } from "ramda";

// src/constants.ts
var builder = (options) => {
  const { z = 3, mu = 25, preventSigmaIncrease = false, epsilon = 1e-4 } = options;
  const { tau = mu / 300, sigma = mu / z, beta = sigma / 2, limitSigma = preventSigmaIncrease } = options;
  const betaSq = beta ** 2;
  return {
    SIGMA: sigma,
    MU: mu,
    EPSILON: epsilon,
    TWOBETASQ: 2 * betaSq,
    BETA: beta,
    BETASQ: betaSq,
    Z: z,
    TAU: tau,
    LIMIT_SIGMA: limitSigma
  };
};
var constants_default = builder;

// src/util.ts
var sum = (a, b) => a + b;
var score = (q, i) => {
  if (q < i) {
    return 0;
  }
  if (q > i) {
    return 1;
  }
  return 0.5;
};
var rankings = (teams, rank = []) => {
  const teamScores = teams.map((_, i) => rank[i] || i);
  const outRank = new Array(teams.length);
  let s = 0;
  for (let j = 0; j < teamScores.length; j += 1) {
    if (j > 0 && teamScores[j - 1] < teamScores[j]) {
      s = j;
    }
    outRank[j] = s;
  }
  return outRank;
};
var teamRating = (options) => (game) => {
  const rank = rankings(game, options.rank);
  return game.map((team, i) => [
    // mu[i]
    team.map(({ mu }) => mu).reduce(sum, 0),
    // sigma^2[i]
    team.map(({ sigma }) => sigma * sigma).reduce(sum, 0),
    // (original team data)
    team,
    // rank[i]
    rank[i]
  ]);
};
var ladderPairs = (ranks) => {
  const size = ranks.length;
  const left = [void 0, ...ranks.slice(0, size - 1)];
  const right = [...ranks.slice(1), void 0];
  return zip(left, right).map(([l, r]) => {
    if (l !== void 0 && r !== void 0) return [l, r];
    if (l !== void 0 && r === void 0) return [l];
    if (l === void 0 && r !== void 0) return [r];
    return [];
  });
};
var utilC = (options) => {
  const { BETASQ } = constants_default(options);
  return (teamRatings) => Math.sqrt(teamRatings.map(([_teamMu, teamSigmaSq, _team, _rank]) => teamSigmaSq + BETASQ).reduce(sum, 0));
};
var utilSumQ = (teamRatings, c) => teamRatings.map(
  ([_qMu, _qSigmaSq, _qTeam, qRank]) => teamRatings.filter(([_iMu, _iSigmaSq, _iTeam, iRank]) => iRank >= qRank).map(([iMu, _iSigmaSq, _iTeam, _iRank]) => Math.exp(iMu / c)).reduce(sum, 0)
);
var utilA = (teamRatings) => teamRatings.map(
  ([_iMu, _iSigmaSq, _iTeam, iRank]) => teamRatings.filter(([_qMu, _qSigmaSq, _qTeam, qRank]) => iRank === qRank).length
);
var gamma = (options) => {
  var _a;
  return (_a = options.gamma) != null ? _a : (
    // default to iSigma / c
    (c, _k, _mu, sigmaSq, _team, _qRank) => Math.sqrt(sigmaSq) / c
  );
};
var util_default = (options) => ({
  utilC: utilC(options),
  teamRating: teamRating(options),
  gamma: gamma(options)
});

// src/models/plackett-luce.ts
var model = (game, options = {}) => {
  const { EPSILON } = constants_default(options);
  const { utilC: utilC2, teamRating: teamRating2, gamma: gamma2 } = util_default(options);
  const teamRatings = teamRating2(game);
  const c = utilC2(teamRatings);
  const sumQ = utilSumQ(teamRatings, c);
  const a = utilA(teamRatings);
  return teamRatings.map((iTeamRating, i) => {
    const [iMu, iSigmaSq, iTeam, iRank] = iTeamRating;
    const iMuOverCe = Math.exp(iMu / c);
    const [omegaSum, deltaSum] = teamRatings.filter(([_qMu, _qSigmaSq, _qTeam, qRank]) => qRank <= iRank).reduce(
      ([omega, delta], [_], q) => {
        const quotient = iMuOverCe / sumQ[q];
        return [omega + (i === q ? 1 - quotient : -quotient) / a[q], delta + quotient * (1 - quotient) / a[q]];
      },
      [0, 0]
    );
    const iGamma = gamma2(c, teamRatings.length, ...iTeamRating);
    const iOmega = omegaSum * (iSigmaSq / c);
    const iDelta = iGamma * deltaSum * (iSigmaSq / c ** 2);
    return iTeam.map(({ mu, sigma }) => ({
      mu: mu + sigma ** 2 / iSigmaSq * iOmega,
      sigma: sigma * Math.sqrt(Math.max(1 - sigma ** 2 / iSigmaSq * iDelta, EPSILON))
    }));
  });
};
var plackett_luce_default = model;

// src/models/bradley-terry-full.ts
var model2 = (game, options = {}) => {
  const { TWOBETASQ, EPSILON } = constants_default(options);
  const { teamRating: teamRating2, gamma: gamma2 } = util_default(options);
  const teamRatings = teamRating2(game);
  return teamRatings.map((iTeamRating, i) => {
    const [iMu, iSigmaSq, iTeam, iRank] = iTeamRating;
    const [iOmega, iDelta] = teamRatings.filter((_, q) => q !== i).reduce(
      ([omega, delta], [qMu, qSigmaSq, _qTeam, qRank]) => {
        const ciq = Math.sqrt(iSigmaSq + qSigmaSq + TWOBETASQ);
        const piq = 1 / (1 + Math.exp((qMu - iMu) / ciq));
        const sigSqToCiq = iSigmaSq / ciq;
        const iGamma = gamma2(ciq, teamRatings.length, ...iTeamRating);
        return [
          omega + sigSqToCiq * (score(qRank, iRank) - piq),
          delta + iGamma * sigSqToCiq / ciq * piq * (1 - piq)
        ];
      },
      [0, 0]
    );
    return iTeam.map(({ mu, sigma }) => {
      const sigmaSq = sigma * sigma;
      return {
        mu: mu + sigmaSq / iSigmaSq * iOmega,
        sigma: sigma * Math.sqrt(Math.max(1 - sigmaSq / iSigmaSq * iDelta, EPSILON))
      };
    });
  });
};
var bradley_terry_full_default = model2;

// src/models/bradley-terry-part.ts
import { zip as zip2 } from "ramda";
var model3 = (game, options = {}) => {
  const { TWOBETASQ, EPSILON } = constants_default(options);
  const { teamRating: teamRating2, gamma: gamma2 } = util_default(options);
  const teamRatings = teamRating2(game);
  const adjacentTeams = ladderPairs(teamRatings);
  return zip2(teamRatings, adjacentTeams).map(([iTeamRating, iAdjacents]) => {
    const [iMu, iSigmaSq, iTeam, iRank] = iTeamRating;
    const [iOmega, iDelta] = iAdjacents.reduce(
      ([omega, delta], [qMu, qSigmaSq, _qTeam, qRank]) => {
        const ciq = Math.sqrt(iSigmaSq + qSigmaSq + TWOBETASQ);
        const piq = 1 / (1 + Math.exp((qMu - iMu) / ciq));
        const sigSqToCiq = iSigmaSq / ciq;
        const iGamma = gamma2(ciq, teamRatings.length, ...iTeamRating);
        return [
          omega + sigSqToCiq * (score(qRank, iRank) - piq),
          delta + iGamma * sigSqToCiq / ciq * piq * (1 - piq)
        ];
      },
      [0, 0]
    );
    return iTeam.map(({ mu, sigma }) => {
      const sigmaSq = sigma * sigma;
      return {
        mu: mu + sigmaSq / iSigmaSq * iOmega,
        sigma: sigma * Math.sqrt(Math.max(1 - sigmaSq / iSigmaSq * iDelta, EPSILON))
      };
    });
  });
};
var bradley_terry_part_default = model3;

// src/statistics.ts
import gaussian from "gaussian";
var normal = gaussian(0, 1);
var phiMajor = (x) => normal.cdf(x);
var phiMinor = (x) => normal.pdf(x);
var v = (x, t) => {
  const xt = x - t;
  const denom = phiMajor(xt);
  return denom < Number.EPSILON ? -xt : phiMinor(xt) / denom;
};
var w = (x, t) => {
  const xt = x - t;
  const denom = phiMajor(xt);
  if (denom < Number.EPSILON) {
    return x < 0 ? 1 : 0;
  }
  return v(x, t) * (v(x, t) + xt);
};
var vt = (x, t) => {
  const xx = Math.abs(x);
  const b = phiMajor(t - xx) - phiMajor(-t - xx);
  if (b < 1e-5) {
    if (x < 0) return -x - t;
    return -x + t;
  }
  const a = phiMinor(-t - xx) - phiMinor(t - xx);
  return (x < 0 ? -a : a) / b;
};
var wt = (x, t) => {
  const xx = Math.abs(x);
  const b = phiMajor(t - xx) - phiMajor(-t - xx);
  return b < Number.EPSILON ? 1 : ((t - xx) * phiMinor(t - xx) + (t + xx) * phiMinor(-t - xx)) / b + vt(x, t) * vt(x, t);
};

// src/models/thurstone-mosteller-full.ts
var model4 = (game, options = {}) => {
  const { TWOBETASQ, EPSILON } = constants_default(options);
  const { teamRating: teamRating2, gamma: gamma2 } = util_default(options);
  const teamRatings = teamRating2(game);
  return teamRatings.map((iTeamRating, i) => {
    const [iMu, iSigmaSq, iTeam, iRank] = iTeamRating;
    const [iOmega, iDelta] = teamRatings.filter((_, q) => i !== q).reduce(
      ([omega, delta], [qMu, qSigmaSq, _qTeam, qRank]) => {
        const ciq = Math.sqrt(iSigmaSq + qSigmaSq + TWOBETASQ);
        const deltaMu = (iMu - qMu) / ciq;
        const sigSqToCiq = iSigmaSq / ciq;
        const iGamma = gamma2(ciq, teamRatings.length, ...iTeamRating);
        if (qRank === iRank) {
          return [
            omega + sigSqToCiq * vt(deltaMu, EPSILON / ciq),
            delta + iGamma * sigSqToCiq / ciq * wt(deltaMu, EPSILON / ciq)
          ];
        }
        const sign = qRank > iRank ? 1 : -1;
        return [
          omega + sign * sigSqToCiq * v(sign * deltaMu, EPSILON / ciq),
          delta + iGamma * sigSqToCiq / ciq * w(sign * deltaMu, EPSILON / ciq)
        ];
      },
      [0, 0]
    );
    return iTeam.map(({ mu, sigma }) => {
      const sigmaSq = sigma * sigma;
      return {
        mu: mu + sigmaSq / iSigmaSq * iOmega,
        sigma: sigma * Math.sqrt(Math.max(1 - sigmaSq / iSigmaSq * iDelta, EPSILON))
      };
    });
  });
};
var thurstone_mosteller_full_default = model4;

// src/models/thurstone-mosteller-part.ts
import { zip as zip3 } from "ramda";
var model5 = (game, options = {}) => {
  const { TWOBETASQ, EPSILON } = constants_default(options);
  const { teamRating: teamRating2, gamma: gamma2 } = util_default(options);
  const teamRatings = teamRating2(game);
  const adjacentTeams = ladderPairs(teamRatings);
  return zip3(teamRatings, adjacentTeams).map(([iTeamRating, iAdjacents]) => {
    const [iMu, iSigmaSq, iTeam, iRank] = iTeamRating;
    const [iOmega, iDelta] = iAdjacents.reduce(
      ([omega, delta], [qMu, qSigmaSq, _qTeam, qRank]) => {
        const ciq = 2 * Math.sqrt(iSigmaSq + qSigmaSq + TWOBETASQ);
        const deltaMu = (iMu - qMu) / ciq;
        const sigSqToCiq = iSigmaSq / ciq;
        const iGamma = gamma2(ciq, teamRatings.length, ...iTeamRating);
        if (qRank === iRank) {
          return [
            omega + sigSqToCiq * vt(deltaMu, EPSILON / ciq),
            delta + iGamma * sigSqToCiq / ciq * wt(deltaMu, EPSILON / ciq)
          ];
        }
        const sign = qRank > iRank ? 1 : -1;
        return [
          omega + sign * sigSqToCiq * v(sign * deltaMu, EPSILON / ciq),
          delta + iGamma * sigSqToCiq / ciq * w(sign * deltaMu, EPSILON / ciq)
        ];
      },
      [0, 0]
    );
    return iTeam.map(({ mu, sigma }) => {
      const sigmaSq = sigma * sigma;
      return {
        mu: mu + sigmaSq / iSigmaSq * iOmega,
        sigma: sigma * Math.sqrt(Math.max(1 - sigmaSq / iSigmaSq * iDelta, EPSILON))
      };
    });
  });
};
var thurstone_mosteller_part_default = model5;
export {
  bradley_terry_full_default as bradleyTerryFull,
  bradley_terry_part_default as bradleyTerryPart,
  plackett_luce_default as plackettLuce,
  thurstone_mosteller_full_default as thurstoneMostellerFull,
  thurstone_mosteller_part_default as thurstoneMostellerPart
};
//# sourceMappingURL=data:application/json;base64,