"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/models/thurstone-mosteller-full.ts
var thurstone_mosteller_full_exports = {};
__export(thurstone_mosteller_full_exports, {
  default: () => thurstone_mosteller_full_default
});
module.exports = __toCommonJS(thurstone_mosteller_full_exports);

// src/util.ts
var import_ramda = require("ramda");

// src/constants.ts
var builder = (options) => {
  const { z = 3, mu = 25, preventSigmaIncrease = false, epsilon = 1e-4 } = options;
  const { tau = mu / 300, sigma = mu / z, beta = sigma / 2, limitSigma = preventSigmaIncrease } = options;
  const betaSq = beta ** 2;
  return {
    SIGMA: sigma,
    MU: mu,
    EPSILON: epsilon,
    TWOBETASQ: 2 * betaSq,
    BETA: beta,
    BETASQ: betaSq,
    Z: z,
    TAU: tau,
    LIMIT_SIGMA: limitSigma
  };
};
var constants_default = builder;

// src/util.ts
var sum = (a, b) => a + b;
var rankings = (teams, rank = []) => {
  const teamScores = teams.map((_, i) => rank[i] || i);
  const outRank = new Array(teams.length);
  let s = 0;
  for (let j = 0; j < teamScores.length; j += 1) {
    if (j > 0 && teamScores[j - 1] < teamScores[j]) {
      s = j;
    }
    outRank[j] = s;
  }
  return outRank;
};
var teamRating = (options) => (game) => {
  const rank = rankings(game, options.rank);
  return game.map((team, i) => [
    // mu[i]
    team.map(({ mu }) => mu).reduce(sum, 0),
    // sigma^2[i]
    team.map(({ sigma }) => sigma * sigma).reduce(sum, 0),
    // (original team data)
    team,
    // rank[i]
    rank[i]
  ]);
};
var utilC = (options) => {
  const { BETASQ } = constants_default(options);
  return (teamRatings) => Math.sqrt(teamRatings.map(([_teamMu, teamSigmaSq, _team, _rank]) => teamSigmaSq + BETASQ).reduce(sum, 0));
};
var gamma = (options) => {
  var _a;
  return (_a = options.gamma) != null ? _a : (
    // default to iSigma / c
    (c, _k, _mu, sigmaSq, _team, _qRank) => Math.sqrt(sigmaSq) / c
  );
};
var util_default = (options) => ({
  utilC: utilC(options),
  teamRating: teamRating(options),
  gamma: gamma(options)
});

// src/statistics.ts
var import_gaussian = __toESM(require("gaussian"), 1);
var normal = (0, import_gaussian.default)(0, 1);
var phiMajor = (x) => normal.cdf(x);
var phiMinor = (x) => normal.pdf(x);
var v = (x, t) => {
  const xt = x - t;
  const denom = phiMajor(xt);
  return denom < Number.EPSILON ? -xt : phiMinor(xt) / denom;
};
var w = (x, t) => {
  const xt = x - t;
  const denom = phiMajor(xt);
  if (denom < Number.EPSILON) {
    return x < 0 ? 1 : 0;
  }
  return v(x, t) * (v(x, t) + xt);
};
var vt = (x, t) => {
  const xx = Math.abs(x);
  const b = phiMajor(t - xx) - phiMajor(-t - xx);
  if (b < 1e-5) {
    if (x < 0) return -x - t;
    return -x + t;
  }
  const a = phiMinor(-t - xx) - phiMinor(t - xx);
  return (x < 0 ? -a : a) / b;
};
var wt = (x, t) => {
  const xx = Math.abs(x);
  const b = phiMajor(t - xx) - phiMajor(-t - xx);
  return b < Number.EPSILON ? 1 : ((t - xx) * phiMinor(t - xx) + (t + xx) * phiMinor(-t - xx)) / b + vt(x, t) * vt(x, t);
};

// src/models/thurstone-mosteller-full.ts
var model = (game, options = {}) => {
  const { TWOBETASQ, EPSILON } = constants_default(options);
  const { teamRating: teamRating2, gamma: gamma2 } = util_default(options);
  const teamRatings = teamRating2(game);
  return teamRatings.map((iTeamRating, i) => {
    const [iMu, iSigmaSq, iTeam, iRank] = iTeamRating;
    const [iOmega, iDelta] = teamRatings.filter((_, q) => i !== q).reduce(
      ([omega, delta], [qMu, qSigmaSq, _qTeam, qRank]) => {
        const ciq = Math.sqrt(iSigmaSq + qSigmaSq + TWOBETASQ);
        const deltaMu = (iMu - qMu) / ciq;
        const sigSqToCiq = iSigmaSq / ciq;
        const iGamma = gamma2(ciq, teamRatings.length, ...iTeamRating);
        if (qRank === iRank) {
          return [
            omega + sigSqToCiq * vt(deltaMu, EPSILON / ciq),
            delta + iGamma * sigSqToCiq / ciq * wt(deltaMu, EPSILON / ciq)
          ];
        }
        const sign = qRank > iRank ? 1 : -1;
        return [
          omega + sign * sigSqToCiq * v(sign * deltaMu, EPSILON / ciq),
          delta + iGamma * sigSqToCiq / ciq * w(sign * deltaMu, EPSILON / ciq)
        ];
      },
      [0, 0]
    );
    return iTeam.map(({ mu, sigma }) => {
      const sigmaSq = sigma * sigma;
      return {
        mu: mu + sigmaSq / iSigmaSq * iOmega,
        sigma: sigma * Math.sqrt(Math.max(1 - sigmaSq / iSigmaSq * iDelta, EPSILON))
      };
    });
  });
};
var thurstone_mosteller_full_default = model;
//# sourceMappingURL=data:application/json;base64,