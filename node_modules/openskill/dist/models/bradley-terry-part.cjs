"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/models/bradley-terry-part.ts
var bradley_terry_part_exports = {};
__export(bradley_terry_part_exports, {
  default: () => bradley_terry_part_default
});
module.exports = __toCommonJS(bradley_terry_part_exports);
var import_ramda2 = require("ramda");

// src/util.ts
var import_ramda = require("ramda");

// src/constants.ts
var builder = (options) => {
  const { z = 3, mu = 25, preventSigmaIncrease = false, epsilon = 1e-4 } = options;
  const { tau = mu / 300, sigma = mu / z, beta = sigma / 2, limitSigma = preventSigmaIncrease } = options;
  const betaSq = beta ** 2;
  return {
    SIGMA: sigma,
    MU: mu,
    EPSILON: epsilon,
    TWOBETASQ: 2 * betaSq,
    BETA: beta,
    BETASQ: betaSq,
    Z: z,
    TAU: tau,
    LIMIT_SIGMA: limitSigma
  };
};
var constants_default = builder;

// src/util.ts
var sum = (a, b) => a + b;
var score = (q, i) => {
  if (q < i) {
    return 0;
  }
  if (q > i) {
    return 1;
  }
  return 0.5;
};
var rankings = (teams, rank = []) => {
  const teamScores = teams.map((_, i) => rank[i] || i);
  const outRank = new Array(teams.length);
  let s = 0;
  for (let j = 0; j < teamScores.length; j += 1) {
    if (j > 0 && teamScores[j - 1] < teamScores[j]) {
      s = j;
    }
    outRank[j] = s;
  }
  return outRank;
};
var teamRating = (options) => (game) => {
  const rank = rankings(game, options.rank);
  return game.map((team, i) => [
    // mu[i]
    team.map(({ mu }) => mu).reduce(sum, 0),
    // sigma^2[i]
    team.map(({ sigma }) => sigma * sigma).reduce(sum, 0),
    // (original team data)
    team,
    // rank[i]
    rank[i]
  ]);
};
var ladderPairs = (ranks) => {
  const size = ranks.length;
  const left = [void 0, ...ranks.slice(0, size - 1)];
  const right = [...ranks.slice(1), void 0];
  return (0, import_ramda.zip)(left, right).map(([l, r]) => {
    if (l !== void 0 && r !== void 0) return [l, r];
    if (l !== void 0 && r === void 0) return [l];
    if (l === void 0 && r !== void 0) return [r];
    return [];
  });
};
var utilC = (options) => {
  const { BETASQ } = constants_default(options);
  return (teamRatings) => Math.sqrt(teamRatings.map(([_teamMu, teamSigmaSq, _team, _rank]) => teamSigmaSq + BETASQ).reduce(sum, 0));
};
var gamma = (options) => {
  var _a;
  return (_a = options.gamma) != null ? _a : (
    // default to iSigma / c
    (c, _k, _mu, sigmaSq, _team, _qRank) => Math.sqrt(sigmaSq) / c
  );
};
var util_default = (options) => ({
  utilC: utilC(options),
  teamRating: teamRating(options),
  gamma: gamma(options)
});

// src/models/bradley-terry-part.ts
var model = (game, options = {}) => {
  const { TWOBETASQ, EPSILON } = constants_default(options);
  const { teamRating: teamRating2, gamma: gamma2 } = util_default(options);
  const teamRatings = teamRating2(game);
  const adjacentTeams = ladderPairs(teamRatings);
  return (0, import_ramda2.zip)(teamRatings, adjacentTeams).map(([iTeamRating, iAdjacents]) => {
    const [iMu, iSigmaSq, iTeam, iRank] = iTeamRating;
    const [iOmega, iDelta] = iAdjacents.reduce(
      ([omega, delta], [qMu, qSigmaSq, _qTeam, qRank]) => {
        const ciq = Math.sqrt(iSigmaSq + qSigmaSq + TWOBETASQ);
        const piq = 1 / (1 + Math.exp((qMu - iMu) / ciq));
        const sigSqToCiq = iSigmaSq / ciq;
        const iGamma = gamma2(ciq, teamRatings.length, ...iTeamRating);
        return [
          omega + sigSqToCiq * (score(qRank, iRank) - piq),
          delta + iGamma * sigSqToCiq / ciq * piq * (1 - piq)
        ];
      },
      [0, 0]
    );
    return iTeam.map(({ mu, sigma }) => {
      const sigmaSq = sigma * sigma;
      return {
        mu: mu + sigmaSq / iSigmaSq * iOmega,
        sigma: sigma * Math.sqrt(Math.max(1 - sigmaSq / iSigmaSq * iDelta, EPSILON))
      };
    });
  });
};
var bradley_terry_part_default = model;
//# sourceMappingURL=data:application/json;base64,