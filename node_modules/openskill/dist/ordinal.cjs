"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/ordinal.ts
var ordinal_exports = {};
__export(ordinal_exports, {
  default: () => ordinal_default
});
module.exports = __toCommonJS(ordinal_exports);

// src/constants.ts
var builder = (options) => {
  const { z = 3, mu = 25, preventSigmaIncrease = false, epsilon = 1e-4 } = options;
  const { tau = mu / 300, sigma = mu / z, beta = sigma / 2, limitSigma = preventSigmaIncrease } = options;
  const betaSq = beta ** 2;
  return {
    SIGMA: sigma,
    MU: mu,
    EPSILON: epsilon,
    TWOBETASQ: 2 * betaSq,
    BETA: beta,
    BETASQ: betaSq,
    Z: z,
    TAU: tau,
    LIMIT_SIGMA: limitSigma
  };
};
var constants_default = builder;

// src/ordinal.ts
var ordinal = (rating, options = {}) => {
  const { sigma, mu } = rating;
  const { Z } = constants_default(options);
  return mu - Z * sigma;
};
var ordinal_default = ordinal;
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL29yZGluYWwudHMiLCAiLi4vc3JjL2NvbnN0YW50cy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IGNvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cydcbmltcG9ydCB7IFJhdGluZywgT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnXG5cbmNvbnN0IG9yZGluYWwgPSAocmF0aW5nOiBSYXRpbmcsIG9wdGlvbnM6IE9wdGlvbnMgPSB7fSk6IG51bWJlciA9PiB7XG4gIGNvbnN0IHsgc2lnbWEsIG11IH0gPSByYXRpbmdcbiAgY29uc3QgeyBaIH0gPSBjb25zdGFudHMob3B0aW9ucylcbiAgcmV0dXJuIG11IC0gWiAqIHNpZ21hXG59XG5cbmV4cG9ydCBkZWZhdWx0IG9yZGluYWxcbiIsICJpbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi90eXBlcydcblxuY29uc3QgYnVpbGRlciA9IChvcHRpb25zOiBPcHRpb25zKSA9PiB7XG4gIC8vIGknZCBsb3ZlIHRvIGtub3cgb2YgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXNcbiAgY29uc3QgeyB6ID0gMywgbXUgPSAyNSwgcHJldmVudFNpZ21hSW5jcmVhc2UgPSBmYWxzZSwgZXBzaWxvbiA9IDAuMDAwMSB9ID0gb3B0aW9uc1xuICBjb25zdCB7IHRhdSA9IG11IC8gMzAwLCBzaWdtYSA9IG11IC8geiwgYmV0YSA9IHNpZ21hIC8gMiwgbGltaXRTaWdtYSA9IHByZXZlbnRTaWdtYUluY3JlYXNlIH0gPSBvcHRpb25zXG4gIGNvbnN0IGJldGFTcSA9IGJldGEgKiogMlxuXG4gIHJldHVybiB7XG4gICAgU0lHTUE6IHNpZ21hLFxuICAgIE1VOiBtdSxcbiAgICBFUFNJTE9OOiBlcHNpbG9uLFxuICAgIFRXT0JFVEFTUTogMiAqIGJldGFTcSxcbiAgICBCRVRBOiBiZXRhLFxuICAgIEJFVEFTUTogYmV0YVNxLFxuICAgIFo6IHosXG4gICAgVEFVOiB0YXUsXG4gICAgTElNSVRfU0lHTUE6IGxpbWl0U2lnbWEsXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYnVpbGRlclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUNFQSxJQUFNLFVBQVUsQ0FBQyxZQUFxQjtBQUVwQyxRQUFNLEVBQUUsSUFBSSxHQUFHLEtBQUssSUFBSSx1QkFBdUIsT0FBTyxVQUFVLEtBQU8sSUFBSTtBQUMzRSxRQUFNLEVBQUUsTUFBTSxLQUFLLEtBQUssUUFBUSxLQUFLLEdBQUcsT0FBTyxRQUFRLEdBQUcsYUFBYSxxQkFBcUIsSUFBSTtBQUNoRyxRQUFNLFNBQVMsUUFBUTtBQUV2QixTQUFPO0FBQUEsSUFDTCxPQUFPO0FBQUEsSUFDUCxJQUFJO0FBQUEsSUFDSixTQUFTO0FBQUEsSUFDVCxXQUFXLElBQUk7QUFBQSxJQUNmLE1BQU07QUFBQSxJQUNOLFFBQVE7QUFBQSxJQUNSLEdBQUc7QUFBQSxJQUNILEtBQUs7QUFBQSxJQUNMLGFBQWE7QUFBQSxFQUNmO0FBQ0Y7QUFFQSxJQUFPLG9CQUFROzs7QURsQmYsSUFBTSxVQUFVLENBQUMsUUFBZ0IsVUFBbUIsQ0FBQyxNQUFjO0FBQ2pFLFFBQU0sRUFBRSxPQUFPLEdBQUcsSUFBSTtBQUN0QixRQUFNLEVBQUUsRUFBRSxJQUFJLGtCQUFVLE9BQU87QUFDL0IsU0FBTyxLQUFLLElBQUk7QUFDbEI7QUFFQSxJQUFPLGtCQUFROyIsCiAgIm5hbWVzIjogW10KfQo=