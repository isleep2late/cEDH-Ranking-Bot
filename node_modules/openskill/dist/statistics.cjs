"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/statistics.ts
var statistics_exports = {};
__export(statistics_exports, {
  phiMajor: () => phiMajor,
  phiMajorInverse: () => phiMajorInverse,
  phiMinor: () => phiMinor,
  v: () => v,
  vt: () => vt,
  w: () => w,
  wt: () => wt
});
module.exports = __toCommonJS(statistics_exports);
var import_gaussian = __toESM(require("gaussian"), 1);
var normal = (0, import_gaussian.default)(0, 1);
var phiMajor = (x) => normal.cdf(x);
var phiMajorInverse = (x) => normal.ppf(x);
var phiMinor = (x) => normal.pdf(x);
var v = (x, t) => {
  const xt = x - t;
  const denom = phiMajor(xt);
  return denom < Number.EPSILON ? -xt : phiMinor(xt) / denom;
};
var w = (x, t) => {
  const xt = x - t;
  const denom = phiMajor(xt);
  if (denom < Number.EPSILON) {
    return x < 0 ? 1 : 0;
  }
  return v(x, t) * (v(x, t) + xt);
};
var vt = (x, t) => {
  const xx = Math.abs(x);
  const b = phiMajor(t - xx) - phiMajor(-t - xx);
  if (b < 1e-5) {
    if (x < 0) return -x - t;
    return -x + t;
  }
  const a = phiMinor(-t - xx) - phiMinor(t - xx);
  return (x < 0 ? -a : a) / b;
};
var wt = (x, t) => {
  const xx = Math.abs(x);
  const b = phiMajor(t - xx) - phiMajor(-t - xx);
  return b < Number.EPSILON ? 1 : ((t - xx) * phiMinor(t - xx) + (t + xx) * phiMinor(-t - xx)) / b + vt(x, t) * vt(x, t);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  phiMajor,
  phiMajorInverse,
  phiMinor,
  v,
  vt,
  w,
  wt
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3N0YXRpc3RpY3MudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBnYXVzc2lhbiBmcm9tICdnYXVzc2lhbidcblxuLy8gdXNlIGEgc3RhbmRhcmQgbm9ybWFsIGRpc3RyaWJ1dGlvbiAtIG1lYW4gb2YgemVybywgc3RkZGV2L3ZhcmlhbmNlIG9mIG9uZVxuY29uc3Qgbm9ybWFsID0gZ2F1c3NpYW4oMCwgMSlcblxuZXhwb3J0IGNvbnN0IHBoaU1ham9yID0gKHg6IG51bWJlcikgPT4gbm9ybWFsLmNkZih4KVxuXG5leHBvcnQgY29uc3QgcGhpTWFqb3JJbnZlcnNlID0gKHg6IG51bWJlcikgPT4gbm9ybWFsLnBwZih4KVxuXG5leHBvcnQgY29uc3QgcGhpTWlub3IgPSAoeDogbnVtYmVyKSA9PiBub3JtYWwucGRmKHgpXG5cbmV4cG9ydCBjb25zdCB2ID0gKHg6IG51bWJlciwgdDogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IHh0ID0geCAtIHRcbiAgY29uc3QgZGVub20gPSBwaGlNYWpvcih4dClcbiAgcmV0dXJuIGRlbm9tIDwgTnVtYmVyLkVQU0lMT04gPyAteHQgOiBwaGlNaW5vcih4dCkgLyBkZW5vbVxufVxuXG5leHBvcnQgY29uc3QgdyA9ICh4OiBudW1iZXIsIHQ6IG51bWJlcikgPT4ge1xuICBjb25zdCB4dCA9IHggLSB0XG4gIGNvbnN0IGRlbm9tID0gcGhpTWFqb3IoeHQpXG4gIGlmIChkZW5vbSA8IE51bWJlci5FUFNJTE9OKSB7XG4gICAgcmV0dXJuIHggPCAwID8gMSA6IDBcbiAgfVxuICByZXR1cm4gdih4LCB0KSAqICh2KHgsIHQpICsgeHQpXG59XG5cbmV4cG9ydCBjb25zdCB2dCA9ICh4OiBudW1iZXIsIHQ6IG51bWJlcikgPT4ge1xuICBjb25zdCB4eCA9IE1hdGguYWJzKHgpXG4gIGNvbnN0IGIgPSBwaGlNYWpvcih0IC0geHgpIC0gcGhpTWFqb3IoLXQgLSB4eClcbiAgaWYgKGIgPCAxZS01KSB7XG4gICAgaWYgKHggPCAwKSByZXR1cm4gLXggLSB0XG4gICAgcmV0dXJuIC14ICsgdFxuICB9XG4gIGNvbnN0IGEgPSBwaGlNaW5vcigtdCAtIHh4KSAtIHBoaU1pbm9yKHQgLSB4eClcbiAgcmV0dXJuICh4IDwgMCA/IC1hIDogYSkgLyBiXG59XG5cbmV4cG9ydCBjb25zdCB3dCA9ICh4OiBudW1iZXIsIHQ6IG51bWJlcikgPT4ge1xuICBjb25zdCB4eCA9IE1hdGguYWJzKHgpXG4gIGNvbnN0IGIgPSBwaGlNYWpvcih0IC0geHgpIC0gcGhpTWFqb3IoLXQgLSB4eClcbiAgcmV0dXJuIGIgPCBOdW1iZXIuRVBTSUxPTlxuICAgID8gMS4wXG4gICAgOiAoKHQgLSB4eCkgKiBwaGlNaW5vcih0IC0geHgpICsgKHQgKyB4eCkgKiBwaGlNaW5vcigtdCAtIHh4KSkgLyBiICsgdnQoeCwgdCkgKiB2dCh4LCB0KVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUFxQjtBQUdyQixJQUFNLGFBQVMsZ0JBQUFBLFNBQVMsR0FBRyxDQUFDO0FBRXJCLElBQU0sV0FBVyxDQUFDLE1BQWMsT0FBTyxJQUFJLENBQUM7QUFFNUMsSUFBTSxrQkFBa0IsQ0FBQyxNQUFjLE9BQU8sSUFBSSxDQUFDO0FBRW5ELElBQU0sV0FBVyxDQUFDLE1BQWMsT0FBTyxJQUFJLENBQUM7QUFFNUMsSUFBTSxJQUFJLENBQUMsR0FBVyxNQUFjO0FBQ3pDLFFBQU0sS0FBSyxJQUFJO0FBQ2YsUUFBTSxRQUFRLFNBQVMsRUFBRTtBQUN6QixTQUFPLFFBQVEsT0FBTyxVQUFVLENBQUMsS0FBSyxTQUFTLEVBQUUsSUFBSTtBQUN2RDtBQUVPLElBQU0sSUFBSSxDQUFDLEdBQVcsTUFBYztBQUN6QyxRQUFNLEtBQUssSUFBSTtBQUNmLFFBQU0sUUFBUSxTQUFTLEVBQUU7QUFDekIsTUFBSSxRQUFRLE9BQU8sU0FBUztBQUMxQixXQUFPLElBQUksSUFBSSxJQUFJO0FBQUEsRUFDckI7QUFDQSxTQUFPLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSTtBQUM5QjtBQUVPLElBQU0sS0FBSyxDQUFDLEdBQVcsTUFBYztBQUMxQyxRQUFNLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDckIsUUFBTSxJQUFJLFNBQVMsSUFBSSxFQUFFLElBQUksU0FBUyxDQUFDLElBQUksRUFBRTtBQUM3QyxNQUFJLElBQUksTUFBTTtBQUNaLFFBQUksSUFBSSxFQUFHLFFBQU8sQ0FBQyxJQUFJO0FBQ3ZCLFdBQU8sQ0FBQyxJQUFJO0FBQUEsRUFDZDtBQUNBLFFBQU0sSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksU0FBUyxJQUFJLEVBQUU7QUFDN0MsVUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUs7QUFDNUI7QUFFTyxJQUFNLEtBQUssQ0FBQyxHQUFXLE1BQWM7QUFDMUMsUUFBTSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ3JCLFFBQU0sSUFBSSxTQUFTLElBQUksRUFBRSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUU7QUFDN0MsU0FBTyxJQUFJLE9BQU8sVUFDZCxNQUNFLElBQUksTUFBTSxTQUFTLElBQUksRUFBRSxLQUFLLElBQUksTUFBTSxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0FBQzNGOyIsCiAgIm5hbWVzIjogWyJnYXVzc2lhbiJdCn0K